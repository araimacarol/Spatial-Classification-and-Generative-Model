step_dummy(all_nominal())
df_reduce %>% prep() %>% juice ()%>%ncol()
df_reduce=recipe(mu~., data=train.data)%>%
step_impute_mean(all_numeric(),-all_outcomes())%>%
step_nzv(all_numeric(),-all_outcomes())%>%
step_lincomb(all_numeric(),-all_outcomes())%>%
step_corr(all_numeric(),-all_outcomes(), threshold = 0.7)
step_dummy(all_nominal())
df_reduce %>% prep() %>% juice ()%>%ncol()
df_reduce=recipe(mu~., data=train.data)%>%
step_impute_mean(all_numeric(),-all_outcomes())%>%
step_nzv(all_numeric(),-all_outcomes())%>%
step_lincomb(all_numeric(),-all_outcomes())%>%
step_corr(all_numeric(),-all_outcomes(), threshold = 0.7)%>%
step_dummy(all_nominal())
df_reduce %>% prep() %>% juice ()%>%ncol()
recipe(mu~., data=train.data)%>%
step_impute_mean(all_numeric(),-all_outcomes())%>%
prep() %>%
juice() %>%
select(-mu) %>%
cor()%>%
as_tibble(rownames="features")%>%
pivot_longer(-features)%>%
filter(features > name)%>%
drop_na()%>%
arrange(desc(abs(value)))
recipe(mu~., data=train.data)%>%
step_impute_mean(all_numeric(),-all_outcomes())%>%
prep() %>%
juice() %>%
select(-mu) %>%
cor()%>%
as_tibble(rownames="features")%>%
pivot_longer(-features)%>%
filter(features > name)%>%
drop_na()%>%
dplyr::arrange(desc(abs(value)))
print(n=100)
CorFeat=recipe(mu~., data=train.data)%>%
step_impute_mean(all_numeric(),-all_outcomes())%>%
prep() %>%
juice() %>%
select(-mu) %>%
cor()%>%
as_tibble(rownames="features")%>%
pivot_longer(-features)%>%
filter(features > name)%>%
drop_na()%>%
dplyr::arrange(desc(abs(value)))
print(CorFeat,n=100)
CorFeat%>%
ggplot(aes(x=value))+
geom_histogram(color="blue")+
scale_x_continuous(labels = scales::label_percent())
CorFeat%>%
ggplot(aes(x=value))+
geom_histogram(color="white")+
scale_x_continuous(labels = scales::label_percent())
df_red_rec=recipe(mu~., data=train.data)%>%
step_impute_mean(all_numeric(),-all_outcomes())%>%
step_nzv(all_numeric(),-all_outcomes())%>%
step_lincomb(all_numeric(),-all_outcomes())%>%
step_corr(all_numeric(),-all_outcomes(), threshold = 0.7)%>%
step_dummy(all_nominal())
df_red_rec %>% prep() %>% juice ()%>%ncol()
pca_rec=recipe(mu~., data=train.data)%>%
step_impute_mean(all_numeric(),-all_outcomes())%>%
step_nzv(all_numeric(),-all_outcomes())%>%
step_lincomb(all_numeric(),-all_outcomes())%>%
step_corr(all_numeric(),-all_outcomes(), threshold = 0.7)%>%
step_dummy(all_nominal())%>%
step_pca(all_predictors(),threshold = 0.75)
pca_rec%>% prep() %>% juice ()%>%ncol()
library(usemodels)
vip.imp.model=rand_forest(trees = 1000)%>%
set_mode("regression")%>%
set_engine("ranger",importance="impurity")%>%
fit(mu~., data=df_recipe %>% prep() %>% juice())
vip(vip.imp.model)
vip.imp.model=rand_forest(trees = 1000)%>%
set_mode("regression")%>%
set_engine("ranger",importance="impurity")%>%
fit(mu~., data=df_recipe %>% prep() %>% juice())
df_recipe
df_recipe=recipe(mu~., data=train.data)%>%
update_role(order,new_role = "nodes")%>%
step_zv(all_predictors())%>%
step_normalize(all_predictors())%>%
step_corr(all_predictors(), threshold = 0.7, method = "spearman")
df_recipe
df_recipe
vip.imp.model=rand_forest(trees = 1000)%>%
set_mode("regression")%>%
set_engine("ranger",importance="impurity")%>%
fit(mu~., data= df_recipe %>% prep() %>% juice())
vip.imp.model=rand_forest(trees = 1000)%>%
set_mode("regression")%>%
set_engine("ranger",importance="impurity")%>%
randomForest::fit(mu~., data= df_recipe %>% prep() %>% juice())
vip.imp.model=rand_forest(trees = 1000)%>%
set_mode("regression")%>%
set_engine("ranger",importance="impurity")%>%
base::fit(mu~., data= df_recipe %>% prep() %>% juice())
library(here)
library(recipeselectors)
install.packages(recipeselectors)
install.packages('recipeselectors')
devtools::install_github("stevenpawley/recipeselectors")
library(recipeselectors)
devtools::install_github("stevenpawley/colino")
library(colino)
library(recipeselectors)
library(here)
vip.imp.model=rand_forest(trees = 1000)%>%
set_mode("regression")%>%
set_engine("ranger",importance="impurity")%>%
fit(mu~., data= df_recipe %>% prep() %>% juice())
?fit
vip.imp.model <- rand_forest(trees = 500) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity") %>%
fit(mu~., data = df_recipe%>% prep() %>% juice())
vip(vip.imp.model)
vi(vip.imp.model) %>%
filter(Importance > 0)
df.rec=recipe(mu~., data=train.data)%>%
step_dummy(all_nominal(one_hot=TRUE))%>%
prep() %>% juice ()
df.rec=recipe(mu~., data=train.data)%>%
step_dummy(all_nominal(),one_hot=TRUE)%>%
prep() %>% juice ()
df.rec
vip.imp.model <- rand_forest(trees = 500) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity") %>%
fit(mu~., data = df_prep%>% prep() %>% juice())
vip.imp.model <- rand_forest(trees = 500) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity") %>%
fit(mu~., data = df.rec%>% prep() %>% juice())
vip.imp.model <- rand_forest(trees = 500) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity") %>%
parsnip::fit(mu~., data = df_recipe%>% prep() %>% juice())
vip(vip.imp.model)
vi(vip.imp.model) %>%
filter(Importance > 0)
vip::vi(vip.imp.model) %>%
filter(Importance > 0)
rfe.model <- rand_forest(mode = "regression") %>% set_engine("ranger", importance = "permutation")
rfe_rec <- recipe(mu~., data = train.data) %>%
step_dummy(all_nominal(), one_hot = TRUE) %>%
step_medianimpute(all_numeric(), -all_outcomes()) %>%
step_select_vip(all_predictors(), outcome = "mu", model = rfe_model, threshold = 0.9)
rfe_rec %>%
prep() %>%
juice()
rfe.model <- rand_forest(mode = "regression") %>% set_engine("ranger", importance = "permutation")
rfe_rec <- recipe(mu~., data = train.data) %>%
step_dummy(all_nominal(), one_hot = TRUE) %>%
step_impute_median(all_numeric(), -all_outcomes()) %>%
step_select_vip(all_predictors(), outcome = "mu", model = rfe.model, threshold = 0.9)
rfe_rec %>%
prep() %>%
juice()
library(recipes)
library(parsnip)
rfe_rec <- recipe(mu~., data = train.data) %>%
step_dummy(all_nominal(), one_hot = TRUE) %>%
step_impute_median(all_numeric(), -all_outcomes()) %>%
step_select_vip(all_predictors(), outcome = "mu", model = rfe.model, threshold = 0.9)
rfe_rec <- recipe(mu~., data = train.data) %>%
step_dummy(all_nominal(), one_hot = TRUE) %>%
step_impute_median(all_numeric(), -all_outcomes()) %>%
step_select(all_predictors(), outcome = "mu", model = rfe.model, threshold = 0.9)
rfe_rec %>%
prep() %>%
juice()
rfe_rec <- recipe(mu~., data = train.data) %>%
step_dummy(all_nominal(), one_hot = TRUE) %>%
step_impute_median(all_numeric(), -all_outcomes()) %>%
parsnip::step_select_vip(all_predictors(), outcome = "mu", model = rfe.model, threshold = 0.9)
rfe_rec %>%
prep() %>%
juice()
rfe.model
rfe_rec <- recipe(mu~., data = train.data) %>%
step_dummy(all_nominal(), one_hot = TRUE) %>%
step_impute_median(all_numeric(), -all_outcomes())
rfe_rec
rfe_rec  %>%
parsnip::step_select_vip(all_predictors(), outcome = "mu", model = rfe.model, threshold = 0.9)
library(vip)
rfe_rec  %>%
parsnip::step_select_vip(all_predictors(), outcome = "mu", model = rfe.model, threshold = 0.9)
rfe_rec <- recipe(mu~., data = train.data) %>%
step_dummy(all_nominal(), one_hot = TRUE) %>%
step_impute_median(all_numeric(), -all_outcomes()) %>%
vip::step_select_vip(all_predictors(), outcome = "mu", model = rfe.model, threshold = 0.9)
library(recipes)
library(parsnip)
##--Method 4: recursive feature elimination
rfe.model <- rand_forest(mode = "regression") %>%
set_engine("ranger", importance = "permutation")
rfe_rec <- recipe(mu~., data = train.data) %>%
step_dummy(all_nominal(), one_hot = TRUE) %>%
step_impute_median(all_numeric(), -all_outcomes()) %>%
step_select_vip(all_predictors(), outcome = "mu", model = rfe.model,
top_p = 10, threshold = 0.9)
step_select_boruta
installed.packages("colino")
library("colino")
devtools::install_github("stevenpawley/colino")
library(recipes)
install.packages("installr")
library(installr)
updateR()
devtools::install_github("stevenpawley/colino")
updateR()
library(installr)
updateR()
library(devtools)
Rcpp::sourceCpp("C:/Users/rcappaw/Desktop/R/Workflow/igraphEpi-New/c++functions.cpp")
library(devtools)
find_rtools()
install.packages("Rtools")
install.packages("sp")
library(devtools)
find_rtools()
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
install.packages("jsonlite", type = "source")
find_rtools()
library(devtools)
find_rtools()
find_rtools()
library(devtools)
find_rtools()
setwd("C:/Users/rcappaw/Desktop/R/Workflow/igraphEpi-New")
library(wdman)
library(tidyverse)
library(RSelenium)
library(netstat)
selenium()
selenium.obj=selenium(retcommand = T,check = F)
selenium.obj
binman::list_versions("chromedriver")
# connecting to selenium server
rs_driver_object <- rsDriver(
browser = 'chrome',
chromever = "113.0.5672.24",
verbose = F,
port = free_port()
)
library(RSelenium)
library(wdman)
library(netstat)
binman::list_versions("chromedriver")
# connecting to selenium server
rs_driver_object <- rsDriver(
browser = 'chrome',
chromever = "112.0.5615.49",
verbose = F,
port = free_port()
)
# connecting to selenium server
rs.driver <- rsDriver(
browser = 'chrome',
chromever = "112.0.5615.49",
verbose = F,
port = free_port()
)
rs.driver$server$stop()
# close the server
rs.driver$server$stop()
# access the client object
remDr <- rs.driver$client
# open a web browser
remDr$open()
# connecting to selenium server
rs.driver <- rsDriver(
browser = 'chrome',
chromever = "112.0.5615.49",
verbose = F,
port = free_port()
)
# access the client object
remDr <- rs.driver$client
# open a web browser
remDr$open()
# navigate to the network repository website
remDr$navigate("https://networkrepository.com/asn.php")
# open a web browser
remDr$open()
# navigate to the network repository website
remDr$navigate("https://networkrepository.com/asn.php")
# navigate to the network repository website
remDr$navigate("https://networkrepository.com")
# navigate to the network repository website
remDr$navigate("https://networkrepository.com/asn.php/")
# navigate to the network repository website
remDr$navigate("https://nrvis.com/download/data/asn/aves-barn-swallow-contact-network.zip")
# navigate to the network repository website
remDr$navigate("https://nrvis.com/download/data/asn/aves-barn-swallow-contact-network.zip/")
# open a web browser
remDr$open()
# navigate to the network repository website
remDr$navigate("https://networkrepository.com/asn.php")
# find the 'a' tags within the specified class name using the xpath method
data_files <- remDr$findElements(using = 'xpath', "//h3[@class='icon-download-alt']/a")
# return the names of the files
data_file_names <- lapply(data_files, function(x) {
x$getElementText() %>% unlist()
})
data_file_names
# find the 'a' tags within the specified class name using the xpath method
data_files <- remDr$findElements(using = 'xpath', "//h3[@class='icon-download-alt']/a")
data_files
# return the names of the files
data_file_names <- lapply(data_files, function(x) {
x$getElementText() %>% unlist()
})
data_file_names
# return the names of the files
data_file_names <- lapply(data_files, function(x) {
x$getElementText() %>% unlist()
}) %>% flatten_chr() %>%
str_remove_all("[:]")
data_file_names
# navigate to the network repository website
remDr$navigate("https://networkrepository.com/asn.php")
# find the 'a' tags within the specified class name using the xpath method
data_files <- remDr$findElements(using = 'xpath', "//h3[@class='icon-download-alt']/a")
data_files
# navigate to the network repository website
remDr$navigate("https://networkrepository.com/asn.php/")
# find the 'a' tags within the specified class name using the xpath method
data_files <- remDr$findElements(using = 'xpath', "//h3[@class='icon-download-alt']/a")
data_files
# find the 'a' tags within the specified class name using the xpath method
data_files <- remDr$findElements(using = 'xpath', "//i[@class='icon-download-alt']/a")
data_files
# return the names of the files
data_file_names <- lapply(data_files, function(x) {
x$getElementText() %>% unlist()
}) %>% flatten_chr() %>%
str_remove_all("[:]")
# return the links to the files
data_file_links <- lapply(data_files, function(x) {
x$getElementAttribute('href') %>% unlist()
}) %>% flatten_chr()
# the loop to download all the files
for (i in 1:length(data_file_names)) {
download.file(
url = data_file_links[i],
destfile = paste0(data_file_names[i], gsub(x = data_file_links[i], pattern = ".*[.]", replacement = "."))
)
}
# find the 'a' tags within the specified class name using the xpath method
data_files <- remDr$findElements(using = 'xpath', "//i[@class='icon-download-alt']/a")
data_files
# find the 'a' tags within the specified class name using the xpath method
data_files <- remDr$findElements(using = 'xpath', "//tr[@class='success hrefRow tooltips']")
data_files
# return the names of the files
data_file_names <- lapply(data_files, function(x) {
x$getElementText() %>% unlist()
}) %>% flatten_chr() %>%
str_remove_all("[:]")
data_file_names
# return the links to the files
data_file_links <- lapply(data_files, function(x) {
x$getElementAttribute('href') %>% unlist()
}) %>% flatten_chr()
data_file_links
# find the 'a' tags within the specified class name using the xpath method
#data_files <- remDr$findElements(using = 'xpath', "//tr[@class='success hrefRow tooltips']")
data_files <- remDr$findElements(using = 'xpath', "//tr//td//i[@class='icon-download-alt']/a")
data_files
# find the 'a' tags within the specified class name using the xpath method
#data_files <- remDr$findElements(using = 'xpath', "//tr[@class='success hrefRow tooltips']")
data_files <- remDr$findElements(using = 'xpath', "//i[@class='icon-download-alt']/a")
data_files
# find the 'a' tags within the specified class name using the xpath method
#data_files <- remDr$findElements(using = 'xpath', "//tr[@class='success hrefRow tooltips']")
data_files <- remDr$findElements(using = 'xpath', "//tr[@class='success hrefRow tooltips']/a")
data_files
# find the 'a' tags within the specified class name using the xpath method
#data_files <- remDr$findElements(using = 'xpath', "//tr[@class='success hrefRow tooltips']")
data_files <- remDr$findElements(using = 'xpath', "//tr[@class='success hrefRow tooltips']")
data_files
data_file_names
# return the names of the files
data_file_names <- lapply(data_files, function(x) {
x$getElementText() %>% unlist()
})
data_file_names
# return the names of the files
data_file_names <- lapply(data_files, function(x) {
x$getElementText() %>% unlist()
}) %>% flatten_chr() %>%
str_remove_all("[:]")
# find the 'a' tags within the specified class name using the xpath method
#data_files <- remDr$findElements(using = 'xpath', "//tr[@class='success hrefRow tooltips']")
data_files <- remDr$findElements(using = 'xpath', "//td[@class='td cell']/a")
data_files
# find the 'a' tags within the specified class name using the xpath method
#data_files <- remDr$findElements(using = 'xpath', "//tr[@class='success hrefRow tooltips']")
data_files <- remDr$findElements(using = 'xpath', "//tr[@class='td cell']/a")
data_files
# find the 'a' tags within the specified class name using the xpath method
#data_files <- remDr$findElements(using = 'xpath', "//tr[@class='success hrefRow tooltips']")
data_files <- remDr$findElements(using = 'xpath', "//td[@class='td cell']/a")
data_files
# find the 'a' tags within the specified class name using the xpath method
#data_files <- remDr$findElements(using = 'xpath', "//tr[@class='success hrefRow tooltips']")
data_files <- remDr$findElements(using = 'xpath', "//td[@class='tdcell']/a")
data_files
# return the names of the files
data_file_names <- lapply(data_files, function(x) {
x$getElementText() %>% unlist()
}) %>% flatten_chr() %>%
str_remove_all("[:]")
data_file_names
# find the 'a' tags within the specified class name using the xpath method
#data_files <- remDr$findElements(using = 'xpath', "//tr[@class='success hrefRow tooltips']")
data_files <- remDr$findElements(using = 'xpath', "//td[@class='tdcell']/Download")
data_files
# find the 'a' tags within the specified class name using the xpath method
#data_files <- remDr$findElements(using = 'xpath', "//tr[@class='success hrefRow tooltips']")
data_files <- remDr$findElements(using = 'xpath', "//td[@class='tdcell']/Download/a")
data_files
# return the names of the files
data_file_names <- lapply(data_files, function(x) {
x$getElementText() %>% unlist()
})
data_file_names
# find the 'a' tags within the specified class name using the xpath method
#data_files <- remDr$findElements(using = 'xpath', "//tr[@class='success hrefRow tooltips']")
data_files <- remDr$findElements(using = 'xpath', "//td[@class='tdcell']/a")
data_files
# return the names of the files
data_file_names <- lapply(data_files, function(x) {
x$getElementText() %>% unlist()
})
data_file_names
# return the names of the files
data_file_names <- lapply(data_files, function(x) {
x$getElementText() %>% unlist()
}) %>% flatten_chr() %>%
str_remove_all("[:]")
# return the links to the files
data_file_links <- lapply(data_files, function(x) {
x$getElementAttribute('href') %>% unlist()
}) %>% flatten_chr()
data_file_links
# the loop to download all the files
for (i in 1:length(data_file_names)) {
download.file(
url = data_file_links[i],
destfile = paste0(data_file_names[i], gsub(x = data_file_links[i], pattern = ".*[.]", replacement = "."))
)
}
getwd()
setwd("C:/Users/rcappaw/Desktop/R/Workflow/igraphEpi-New/ANIMAL-SOCIAL-NETWORS-REPOSITORY")
getwd()
library(tidyverse)
library(RSelenium)
library(wdman)
library(netstat)
# connecting to selenium server
rs.driver <- rsDriver(
browser = 'chrome',
chromever = "112.0.5615.49",
verbose = F,
port = free_port()
)
# close the server
rs.driver$server$stop()
# access the client object
remDr <- rs.driver$client
# open a web browser
remDr$open()
# open a web browser
remDr$open()
# connecting to selenium server
rs.driver <- rsDriver(
browser = 'chrome',
chromever = "112.0.5615.49",
verbose = F,
port = free_port()
)
# close the server
rs.driver$server$stop()
# close the server
rs.driver$server$stop()
# close the server
rs.driver$server$stop()
# connecting to selenium server
rs.driver <- rsDriver(
browser = 'chrome',
chromever = "112.0.5615.49",
verbose = F,
port = free_port()
)
# close the server
rs.driver$server$stop()
# access the client object
remDr <- rs.driver$client
# open a web browser
remDr$open()
