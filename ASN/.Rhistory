#setwd("C:/Users/rcappaw/Desktop/R/Workflow/igraphEpi-New")
#projectfolder=paste(getwd(), "/", sep = '')
#FolderName=setwd("C:/Users/rcappaw/Desktop/R/Workflow/igraphEpi-New/Animal-Social-Networks")
FolderName=setwd("C:/Users/rcappaw/Desktop/R/Workflow/igraphEpi-New/ANIMALS")
library(igraph)
largest_comp=function(df){
G=graph_from_data_frame(as.matrix(df),directed=FALSE)
df.graph=igraph::simplify(G,remove.multiple = T,remove.loops = T)
Isolated = which(igraph::degree(df.graph)==0)
Net=igraph::delete.vertices(df.graph, Isolated)
components = igraph::clusters(Net, mode="weak")
biggest_cluster_id = which.max(components$csize)
vert_ids = V(df.graph)[components$membership== biggest_cluster_id]
graph=igraph::induced_subgraph(df.graph, vert_ids)
}
Network.Summary <- function(FolderName){
Net.lists = list.files(FolderName)
Net.Feat.Summary = data.frame()
Net.lists=as.list(Net.lists)
g = lapply(Net.lists,read.table)
GraphNames = cbind(lapply(Net.lists,function(x) gsub(".edges","",x)))
G = lapply(g, largest_comp)
g.features=calcGraphFeatures(G)
all_graphs=cbind(GraphNames, g.features)
return(all_graphs)
}
z=Network.Summary(FolderName )
z
z=Network.Summary(FolderName )
Network.Summary <- function(FolderName){
Net.lists = list.files(FolderName)
Net.Feat.Summary = data.frame()
Net.lists=as.list(Net.lists)
g = lapply(Net.lists,read.table)
GraphNames = cbind(lapply(Net.lists,function(x) gsub(".edges","",x)))
G = lapply(g, largest_comp)
g.features=calcGraphFeatures(G)
all_graphs=cbind(GraphNames, g.features)
return(g)
}
z=Network.Summary(FolderName )
setwd("C:/Users/rcappaw/Desktop/R/Workflow/igraphEpi-New")
suppressPackageStartupMessages({
library(Matrix)
library(stats)
library(igraph)
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(janitor)
library(vip)
})
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+ Data generation for the machine learning model
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#++++++++++++++++++++++++++++++++
#+ Helper functions
#+++++++++++++++++++++++++++++++
##########################################################################################################
# Input an igraph object from a file, treating it as a static graph
##########################################################################################################
getGraphFromFile <- function(file, simplify=TRUE, useBiggestComponent=TRUE, asUndirected=TRUE) {
dat <- read.table(file) # just read static graph: ignoring third column
G <- graph_from_data_frame(dat)
if (asUndirected==TRUE) {
G <- as.undirected(G, "collapse")
}
#  g_names <- gsub(".edges","",networks[i]) # one edge for each pair of connect vertices (not sure what this is for)
if (useBiggestComponent==TRUE) {
netclust <- clusters(G) #look for subgraphs
gcc <- V(G)[netclust$membership == which.max(netclust$csize)]#select vertices from the largest sub-graph
G <- induced.subgraph(G, gcc) #make it a igraph object.
}
if (simplify==TRUE) {
G <- igraph::simplify(G, remove.multiple = TRUE, remove.loops = TRUE)
}
return(G)
}
###--Normalized Laplacina function--##
normalized_laplacian=function(Graphs){
laplacian_matrix(Graphs,normalized = T)
}
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+ Calculate graph features
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++
calcGraphFeatures <- function(Graphs=NULL) {
features <- c(
"order",                    # number of vertices
"edges",                     # number of edges
"connected",                # True / False
"max_component",            # maximum component size (=order iff the graph is connected)
"minDegree",                # minimum degree of any vertex
"maxDegree",                # maximum degree of any vertex
"mean_degree",                # average degree of any vertex
"minCut",                   # minimum cut weight of the graph (might take a while to compute)
"FiedlerValue",             # second-highest eigenvalue of the Laplacian matrix
"Normalized_FiedlerValue",   # second-highest eigenvalue of the Normaized Laplacian matrix
"closeness_centr",                # average inverse of distance between any pair of vertices
"modularity",               # DEFINITION REQUIRED
"diameter",                 # maximum distance between any two vertices (NAN if not connected)
"betw_centr",              # max_{v} proportion of shortest paths going through vertex v
"transitivity",             # aka Clustering Coefficient, is proportion of connected triples that form triangles: e.g., (a--b--c--a) when (a--b--c) is present.
"threshold",                 # 1/max(eigen value of A)
"spectral_radius"         # max (eigen value of A)
)
df <- as.data.frame(matrix(ncol=length(features),nrow=length(Graphs)))
colnames(df)=features
# Stuff that is simple to apply and needs no interim components:
df$order = base::as.numeric(lapply(Graphs, gorder))
df$edges = base::as.numeric(lapply(Graphs, gsize))
df$connected = base::as.numeric(lapply(Graphs, is_connected))
df$minCut = base::as.numeric(lapply(Graphs, min_cut))
df$diameter = base::as.numeric(lapply(Graphs, diameter))
df$transitivity = base::as.numeric(lapply(Graphs, transitivity))
# stuff that needs interim things:
degrees = lapply(Graphs,igraph::degree )
df$minDegree = base::as.numeric(lapply(degrees, min))
df$maxDegree = base::as.numeric(lapply(degrees, max))
df$mean_degree = base::as.numeric(lapply(degrees, mean))
# stuff that lapply doesn't like so has to be done in a loop:
communities <-lapply(Graphs, cluster_walktrap) #lapply(Graphs, cluster_leading_eigen)
Adj <- lapply(Graphs, as_adjacency_matrix)
L <- lapply(Graphs, laplacian_matrix)
Norm_Lap<-lapply(Graphs, normalized_laplacian)
Fiedler.value=NULL
norm.fiedler.value=NULL
for (i in 1:length(Graphs)) {
if (is.null(Graphs[[i]]$type)) { Graphs[[i]]$type = "untyped" }
df$modularity[i] <- modularity(communities[[i]])
df$spectral_radius[i] <- eigen(Adj[[i]], symmetric=TRUE, only.values=TRUE)$values[1]
Fiedler.value[[i]]=eigen(L[[i]], symmetric=TRUE, only.values=TRUE)$values
df$FiedlerValue[i] <- Fiedler.value[[i]][length(Fiedler.value[[i]])-1]
norm.fiedler.value[[i]]=eigen(Norm_Lap[[i]], symmetric=TRUE, only.values=TRUE)$values
df$Normalized_FiedlerValue[i] <- norm.fiedler.value[[i]][length(norm.fiedler.value[[i]])-1]
df$eigen_centr[i] <- centr_eigen(Graphs[[i]])$centralization
df$deg_centr[i] <- centr_degree(Graphs[[i]])$centralization
df$betw_centr[i] <- centr_betw(Graphs[[i]])$centralization
df$max_component[i] <- max(components(Graphs[[i]])$csize)
df$mean_eccentr[i]<-mean(eccentricity(Graphs[[i]]))
df$radius[i]<-radius(Graphs[[i]])
df$mean_path_length[i]<-average.path.length(Graphs[[i]])
#df$trace[i]<-sum(diag(Adj[[i]]))
df$graph_energy[i]<-sum(abs(eigen(Adj[[i]], symmetric=TRUE, only.values=TRUE)$values))
df$min_triangle[i]= min(count_triangles(Graphs[[i]]))
df$mean_triangle[i]= mean(count_triangles(Graphs[[i]]))
df$sd_triangle[i]= sd(count_triangles(Graphs[[i]]))
df$max_triangle[i]= max(count_triangles(Graphs[[i]]))
df$num_triangle[i]= sum(count_triangles(Graphs[[i]]))
df$deg_assort_coef[i]=assortativity_degree(Graphs[[i]])
df$threshold[i] <- 1/(df$spectral_radius[i])
if (df$connected[i]==TRUE) {
df$closeness_centr[i] = mean(closeness(Graphs[[i]]))
} else { # handle the case where G isn't connected
df$closeness_centr[i] = -1
}
}
return (df)
}
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+ Multiple Calculation of graph features
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## Used to perform runs on multiple simulated graphs on any given network
RunSimOnGraphFeatures<-function(Graphs, nreps=nreps,output_file=NULL, seed=-1) {
set.seed(1)
# ### Definition and initialization of parameters for graphfeatures
graphProperties=list()
# ### Definition and initialization of Graph Prefix
graphid=list();graphreplicate=list(); graphname=list(); GraphPrefix=list(); analysis=list()
for (g in 1:length(Graphs)){
for (reps in 1:nreps) {
### Calculate the graph features for each simulated graph of all the synthetic networks
print(paste("Calculating graph features on", Graphs[[g]]$name))
#graphProperties[[reps]] <- calcGraphFeatures(Graphs[g])
graphProperties[[reps]] <- calcGraphFeatures(Graphs[g])
}
graphname[[g]]=Graphs[[g]]$type
graphid[[g]]=Graphs[[g]]$id
graphreplicate[[g]]=c(1:nreps)
GraphPrefix=cbind(graphname[[g]],graphid[[g]],graphreplicate[[g]])
colnames(GraphPrefix)=c("GraphName","GraphID","GraphReplicate")
analysis[[g]]=as.data.frame(cbind(GraphPrefix,graphProperties[[reps]]))
row.names(analysis[[g]])=1:nreps
}
All_results=do.call(rbind,analysis)
# write.csv(All_results, file=output_file)
return( All_results)
}
# Helper functions for spatial graphs to convert between (row, column) pairs and the index in a list of Cells.
cellCoordsToIndex <- function(i, j, size) {
return((i-1)*size+j)
}
indexToCellCoords <- function(idx, size) {
j <- (idx-1) %% size + 1
i <- (idx + size-1) %/% size
return(c(i,j))
}
####---Induce graph function---######
induced.graph=function(Graphs){
initgraph=NULL;G=NULL
for (i in 1:length(Graphs)){
initgraph=Graphs[[i]]
components = igraph::clusters(initgraph , mode="weak")
biggest_cluster_id = which.max(components$csize)
# # ids
vert_ids = V(initgraph)[components$membership== biggest_cluster_id]
# # subgraph
G[[i]]=igraph::induced_subgraph(initgraph, vert_ids)
}
return(initgraph)
}
#setwd("C:/Users/rcappaw/Desktop/R/Workflow/igraphEpi-New")
#projectfolder=paste(getwd(), "/", sep = '')
#FolderName=setwd("C:/Users/rcappaw/Desktop/R/Workflow/igraphEpi-New/Animal-Social-Networks")
FolderName=setwd("C:/Users/rcappaw/Desktop/R/Workflow/igraphEpi-New/ANIMALS")
library(igraph)
largest_comp=function(df){
G=graph_from_data_frame(as.matrix(df),directed=FALSE)
df.graph=igraph::simplify(G,remove.multiple = T,remove.loops = T)
Isolated = which(igraph::degree(df.graph)==0)
Net=igraph::delete.vertices(df.graph, Isolated)
components = igraph::clusters(Net, mode="weak")
biggest_cluster_id = which.max(components$csize)
vert_ids = V(df.graph)[components$membership== biggest_cluster_id]
graph=igraph::induced_subgraph(df.graph, vert_ids)
}
Network.Summary <- function(FolderName){
Net.lists = list.files(FolderName)
Net.Feat.Summary = data.frame()
Net.lists=as.list(Net.lists)
g = lapply(Net.lists,read.table)
GraphNames = cbind(lapply(Net.lists,function(x) gsub(".edges","",x)))
G = lapply(g, largest_comp)
g.features=calcGraphFeatures(G)
all_graphs=cbind(GraphNames, g.features)
return(all_graphs)
}
z=Network.Summary(FolderName )
getwd()
